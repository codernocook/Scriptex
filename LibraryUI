    local LibraryUI = {}
    local CoreGui = game:GetService("CoreGui")
    local Camera = game:GetService("Workspace").CurrentCamera or game:GetService("Workspace").Camera
    local MainGui = nil
    local oldcameratype = nil
    local TabCount = 0
    local Blurgui = Instance.new("BlurEffect")
    Blurgui.Parent = game:GetService("Lighting")
    Blurgui.Enabled = false
    local AllTab = {}
    local uis = game:GetService("UserInputService")
    local mouse = game:GetService("Players").LocalPlayer:GetMouse()

    function randomString(lengthget)
        if lengthget and tonumber(lengthget) then
            local length = tonumber(lengthget)
            local array = {}
            for i = 1, length do
                array[i] = string.char(math.random(32, 126))
            end
            return table.concat(array)
        else
            local length = math.random(10,20)
        local array = {}
        for i = 1, length do
            array[i] = string.char(math.random(32, 126))
        end
        return table.concat(array)
        end
    end

    Blurgui.Name = randomString(50)

    function getRoot(charget)
        local rootPart = charget:FindFirstChild('HumanoidRootPart') or charget:FindFirstChild('Torso') or charget:FindFirstChild('UpperTorso')
        return rootPart
    end

    function LibraryUI.CreateLib(Title, theme)
        local LibraryCall = {}
        local TabGui = Instance.new("ScreenGui")
        MainGui = Instance.new("Frame")
        local Corner = Instance.new("UICorner")

        TabGui.Parent = CoreGui or game:GetService("CoreGui")
        TabGui.ResetOnSpawn = false
        TabGui.Name = randomString()
        TabGui.OnTopOfCoreBlur = true
        TabGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        MainGui.Name = randomString()
        MainGui.Visible = false
        MainGui.Parent = TabGui
        MainGui.AnchorPoint = Vector2.new(0.5, 0.5)
        MainGui.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        MainGui.BorderSizePixel = 0
        MainGui.Position = UDim2.new(0.5, 0, 0.5, 0)
        MainGui.Size = UDim2.new(0, 750, 0, 530)

        Corner.Name = "Corner"
        Corner.Parent = MainGui

        local UIListLayout = Instance.new("UIListLayout")

        UIListLayout.Parent = MainGui
        UIListLayout.FillDirection = Enum.FillDirection.Horizontal
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

        local Tab = Instance.new("Frame")
        local TabCorner = Instance.new("UICorner")
        local TabUIlist = Instance.new("UIListLayout")

        Tab.Name = randomString()
        Tab.Parent = MainGui
        Tab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Tab.BorderSizePixel = 0
        Tab.Size = UDim2.new(0, 180, 1, 0)

        TabCorner.Name = randomString()
        TabCorner.Parent = Tab

        TabUIlist.Name = randomString()
        TabUIlist.Parent = Tab

        TabUIlist.HorizontalAlignment = Enum.HorizontalAlignment.Center
        TabUIlist.SortOrder = Enum.SortOrder.LayoutOrder
        TabUIlist.Padding = UDim.new(0, 0)

        local Logo = Instance.new("TextLabel")

        Logo.Name = randomString()
        Logo.Parent = Tab
        Logo.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Logo.BackgroundTransparency = 1.000
        Logo.BorderSizePixel = 0
        Logo.LayoutOrder = 0
        Logo.Size = UDim2.new(1, 0, 0, 50)
        Logo.Font = Enum.Font.ArialBold
        Logo.Text = tostring(Title)
        Logo.TextColor3 = Color3.fromRGB(20, 145, 255)
        Logo.TextSize = 30.000

        function LibraryCall:NewTab(TabName)
            local TabCall = {}
            TabCount += 1
            local SelectTab = Instance.new("TextButton")
            SelectTab.Name = randomString()
            SelectTab.Parent = Tab
            SelectTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            SelectTab.BackgroundTransparency = 0
            SelectTab.AutoButtonColor = false
            SelectTab.BorderSizePixel = 0
            SelectTab.LayoutOrder = TabCount
            SelectTab.Size = UDim2.new(1, 0, 0, 40)
            SelectTab.Font = Enum.Font.Arial
            SelectTab.Text = tostring(TabName) or "Tab"
            SelectTab.TextColor3 = Color3.fromRGB(255, 255, 255)
            SelectTab.TextSize = 20.000

            local SectionWindows = Instance.new("ScrollingFrame")
            SectionWindows.Name = randomString()..tostring(Title)
            SectionWindows.Parent = MainGui
            SectionWindows.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            SectionWindows.BorderSizePixel = 0
            SectionWindows.LayoutOrder = 2
            SectionWindows.ScrollBarThickness = 0
            SectionWindows.Size = UDim2.new(0, 570, 1, 0)
            if TabCount <= 1 then
                SectionWindows.Visible = true
                SelectTab.BackgroundColor3 = Color3.fromRGB(20, 145, 255)
            else
                SectionWindows.Visible = false
                SelectTab.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            end

            local ValueDetection = Instance.new("BoolValue")
            ValueDetection.Parent = SectionWindows
            ValueDetection.Name = randomString()
            ValueDetection.Value = true

            SelectTab.MouseButton1Click:Connect(function()
                if SectionWindows.Visible == false then
                    for count, allchildget in pairs(MainGui:GetChildren()) do
                        if allchildget.ClassName == "ScrollingFrame" and allchildget:FindFirstChildWhichIsA("BoolValue") then
                            allchildget.Visible = false
                        end
                    end
                    for buttongetcount, allbuttons in pairs(Tab:GetChildren()) do
                        if allbuttons.ClassName == "TextButton" then
                            allbuttons.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                        end
                    end
                    SectionWindows.Visible = true
                    SelectTab.BackgroundColor3 = Color3.fromRGB(20, 145, 255)
                end
            end)

            local TabNameLabel = Instance.new("TextLabel")

            TabNameLabel.Name = randomString()
            TabNameLabel.Parent = SectionWindows
            TabNameLabel.LayoutOrder = 0
            TabNameLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            TabNameLabel.BackgroundTransparency = 1.000
            TabNameLabel.BorderSizePixel = 0
            TabNameLabel.Size = UDim2.new(0, 200, 0, 50)
            TabNameLabel.Font = Enum.Font.Ubuntu
            TabNameLabel.Text = tostring(TabName) or "Tab"
            TabNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TabNameLabel.TextSize = 20.000
            TabNameLabel.TextXAlignment = Enum.TextXAlignment.Left

            local UIGridLayout = Instance.new("UIGridLayout")

            UIGridLayout.Parent = SectionWindows
            UIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIGridLayout.CellPadding = UDim2.new(0, 5, 0, 10)
            UIGridLayout.CellSize = UDim2.new(0, 500, 0, 50)

            function TabCall:NewToggle(ToggleTitle, Description, callback)
                local ToggleCall = {}
                local callback = callback or function() end
                
                local Toggle = Instance.new("TextButton")
                local UICorner = Instance.new("UICorner")
                local TextLabel = Instance.new("TextLabel")
                local Toggle_2 = Instance.new("TextButton")
                local UICorner_2 = Instance.new("UICorner")
                local Frame = Instance.new("Frame")
                local UICorner_3 = Instance.new("UICorner")
                local ToggleState = false

                local Dropdown = Instance.new("Frame")
                local DropDowncorner = Instance.new("UICorner")

                Toggle.Name = randomString()
                Toggle.Parent = SectionWindows
                Toggle.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                Toggle.BorderSizePixel = 0
                Toggle.LayoutOrder = 1
                Toggle.Size = UDim2.new(0, 100, 0, 100)
                Toggle.AutoButtonColor = false

                Toggle.MouseButton2Click:Connect(function()
                    if Dropdown.Visible == false then
                        Dropdown.Visible = true
                    else
                        Dropdown.Visible = false
                    end
                end)

                Dropdown.Name = randomString()
                Dropdown.Visible = false
                Dropdown.Parent = Toggle
                Dropdown.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                Dropdown.BorderSizePixel = 0
                Dropdown.Position = UDim2.new(0, 0, 0.8, 0)
                Dropdown.Size = UDim2.new(1, 0, 0, 10)

                DropDowncorner.Parent = Dropdown
                DropDowncorner.CornerRadius = UDim.new(0, 8)

                UICorner.Parent = Toggle

                TextLabel.Parent = Toggle
                TextLabel.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                TextLabel.BackgroundTransparency = 1.000
                TextLabel.Position = UDim2.new(0.0500000007, 0, 0, 0)
                TextLabel.Size = UDim2.new(0, 200, 0, 50)
                TextLabel.Font = Enum.Font.Ubuntu
                TextLabel.Text = tostring(ToggleTitle)
                TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                TextLabel.TextSize = 15.000
                TextLabel.TextXAlignment = Enum.TextXAlignment.Left

                Toggle_2.Name = randomString()
                Toggle_2.Parent = Toggle
                Toggle_2.AnchorPoint = Vector2.new(1, 0.5)
                Toggle_2.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                Toggle_2.BorderSizePixel = 0
                Toggle_2.Position = UDim2.new(0.95, 0, 0.5, 0)
                Toggle_2.Size = UDim2.new(0, 50, 0, 20)
                Toggle_2.Font = Enum.Font.SourceSans
                Toggle_2.Text = ""
                Toggle_2.TextColor3 = Color3.fromRGB(0, 0, 0)
                Toggle_2.TextSize = 1.000

                UICorner_2.Parent = Toggle_2

                Frame.Parent = Toggle_2
                Frame.AnchorPoint = Vector2.new(0, 0.5)
                Frame.BackgroundColor3 = Color3.fromRGB(9, 156, 209)
                Frame.BorderSizePixel = 0
                Frame.Position = UDim2.new(0, 0, 0.5, 0)
                Frame.Size = UDim2.new(0.300000012, 0, 1.29999995, 0)

                UICorner_3.Parent = Frame

                Toggle_2.MouseButton1Click:Connect(function()
                    if ToggleState == false then
                        Frame:TweenPosition(UDim2.new(0.8, 0, 0.5, 0), "In", Enum.EasingStyle.Linear, 0.1, false)
                        ToggleState = true
                        pcall(callback, true)
                        TextLabel.TextColor3 = Color3.fromRGB(9, 156, 209)
                        Toggle_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    else
                        Frame:TweenPosition(UDim2.new(0, 0, 0.5, 0), "In", Enum.EasingStyle.Linear, 0.1, false)
                        ToggleState = false
                        pcall(callback, false)
                        Toggle_2.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                        TextLabel.TextColor3 = Color3.fromRGB(255,255,255)
                    end
                end)

                function ToggleCall:NewDropDown(DropdownTitle, minvalue, maxvalue, currentvalue, callbackdropdown)
                    local callbackdropdown = callbackdropdown or function() end
                    local minvalue = tonumber(minvalue) or 0
                    local maxvalue = tonumber(maxvalue) or 100
                    local currentvalue = tonumber(currentvalue) or 0

                    local Slider = Instance.new("Frame")
                    local SliderTrigger = Instance.new("TextButton")
                    local SliderFrame = Instance.new("Frame")
                    local UICorner = Instance.new("UICorner")
                    local TextButton = Instance.new("TextLabel")

                    Slider.Name = "Slider"
                    Slider.Parent = Dropdown
                    Slider.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                    Slider.BorderSizePixel = 0
                    Slider.Size = UDim2.new(1, 0, 0, 40)

                    SliderTrigger.Name = "SliderTrigger"
                    SliderTrigger.Parent = Slider
                    SliderTrigger.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                    SliderTrigger.BackgroundTransparency = 1.000
                    SliderTrigger.BorderSizePixel = 0
                    SliderTrigger.Position = UDim2.new(0.200000003, 0, 0, 0)
                    SliderTrigger.Size = UDim2.new(0.800000012, 0, 1, 0)
                    SliderTrigger.Font = Enum.Font.SourceSans
                    SliderTrigger.Text = ""
                    SliderTrigger.TextColor3 = Color3.fromRGB(0, 0, 0)
                    SliderTrigger.TextSize = 1.000

                    SliderFrame.Name = "SliderFrame"
                    SliderFrame.Parent = Slider
                    SliderFrame.AnchorPoint = Vector2.new(0, 0.5)
                    SliderFrame.BackgroundColor3 = Color3.fromRGB(9, 156, 209)
                    SliderFrame.BorderSizePixel = 0
                    SliderFrame.Position = UDim2.new(0, 100, 0.5, 0)
                    SliderFrame.Size = UDim2.new(0, 0, 0, 10)

                    UICorner.Parent = SliderFrame

                    TextButton.Parent = Slider
                    TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    TextButton.BackgroundTransparency = 1.000
                    TextButton.BorderSizePixel = 0
                    TextButton.Size = UDim2.new(0, 100, 1, 0)
                    TextButton.Font = Enum.Font.Ubuntu
                    TextButton.Text = DropdownTitle .. ": 0" or "Slider: 0"
                    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                    TextButton.TextSize = 14.000
                    SliderTrigger.MouseButton1Down:Connect(function()
                        currentvalue = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 318) * SliderFrame.AbsoluteSize.X) + tonumber(minvalue)) or 0
                        pcall(callbackdropdown, currentvalue)
                        SliderFrame.Size = UDim2.new(0, math.clamp(mouse.X - SliderFrame.AbsolutePosition.X, 0, 318), 0, 16)
                        local moveconnection = mouse.Move:Connect(function()
                            TextButton.Text = DropdownTitle .. ": " .. tostring(currentvalue) or "Slider: " .. tostring(currentvalue)
                            currentvalue = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 318) * SliderFrame.AbsoluteSize.X) + tonumber(minvalue))
                            pcall(callbackdropdown, currentvalue)
                            SliderFrame:TweenSize(UDim2.new(0, math.clamp(mouse.X - SliderFrame.AbsolutePosition.X, 0, 318), 0, 16), "In", Enum.EasingStyle.Linear, 0.15, false)
                        end)
                        local releaseconnection
                        releaseconnection = uis.InputEnded:Connect(function(Mouse)
                            if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
                                currentvalue = math.floor((((tonumber(maxvalue) - tonumber(minvalue)) / 318) * SliderFrame.AbsoluteSize.X) + tonumber(minvalue))
                                pcall(callbackdropdown, currentvalue)
                                SliderFrame:TweenSize(UDim2.new(0, math.clamp(mouse.X - SliderFrame.AbsolutePosition.X, 0, 318), 0, 16), "In", Enum.EasingStyle.Linear, 0.15, false)
                                moveconnection:Disconnect()
                                releaseconnection:Disconnect()
                            end
                        end)
                    end)
                end
                return ToggleCall
            end
            return TabCall
        end
        
        function LibraryCall:WindowsToggle(state)
            if state == true then
                if MainGui then
                    pcall(function()
                        local plr = game:GetService("Players").LocalPlayer
                        MainGui.Size = UDim2.new(0, 0, 0, 0)
                        MainGui:TweenSize(UDim2.new(0, 750, 0, 530), "In", Enum.EasingStyle.Linear, 0.15, false)
                        getRoot(plr.Character).Anchored = true
                        MainGui.Visible = true
                        oldcameratype = Camera.CameraType
                        Blurgui.Enabled = true
                        Camera.CameraType = Enum.CameraType.Scriptable
                    end)
                end
            elseif state == false then
                if MainGui then
                    pcall(function()
                        local plr = game:GetService("Players").LocalPlayer
                        getRoot(plr.Character).Anchored = false
                        MainGui.Visible = false
                        Blurgui.Enabled = false
                        if oldcameratype then
                            Camera.CameraType = oldcameratype
                        else
                            Camera.CameraType = Enum.CameraType.Custom
                        end
                    end)
                end
            end
        end

        function LibraryCall:GetWindowsToggle()
            return MainGui.Visible
        end
        
        function LibraryCall:notify(text)
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Notification";
                Text = tostring(text);
                Duration = 5
            })
        end

        local function zigzag(X) return math.acos(math.cos(X*math.pi))/math.pi end
        local rainbowcounterforlogo1 = 0
        game:GetService("RunService").Heartbeat:Connect(function()
            Logo.TextColor3 = Color3.fromHSV(zigzag(rainbowcounterforlogo1),1,1)
            rainbowcounterforlogo1 = rainbowcounterforlogo1 + 0.01
        end)
        return LibraryCall
    end

    return LibraryUI
